# pdf_reader.py - autogenerated template file
import PyPDF2
import pdfplumber
from typing import Optional, Dict, Any
import re
import logging

logger = logging.getLogger(__name__)

class PDFReader:
    """Utility class for reading PDF files"""
    
    def __init__(self):
        self.supported_methods = ["pdfplumber", "pypdf2"]
    
    def extract_text(self, file_path: str, method: str = "pdfplumber") -> Optional[str]:
        """
        Extract text from PDF file using specified method
        
        Args:
            file_path: Path to PDF file
            method: Extraction method ('pdfplumber' or 'pypdf2')
            
        Returns:
            Extracted text or None if extraction fails
        """
        try:
            if method == "pdfplumber":
                return self._extract_with_pdfplumber(file_path)
            elif method == "pypdf2":
                return self._extract_with_pypdf2(file_path)
            else:
                raise ValueError(f"Unsupported method: {method}")
        except Exception as e:
            logger.error(f"Error extracting text from PDF: {str(e)}")
            return None
    
    def _extract_with_pdfplumber(self, file_path: str) -> str:
        """Extract text using pdfplumber"""
        text = ""
        with pdfplumber.open(file_path) as pdf:
            for page in pdf.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text + "\n"
        return text.strip()
    
    def _extract_with_pypdf2(self, file_path: str) -> str:
        """Extract text using PyPDF2"""
        text = ""
        with open(file_path, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            for page in pdf_reader.pages:
                text += page.extract_text() + "\n"
        return text.strip()
    
    def extract_with_fallback(self, file_path: str) -> Optional[str]:
        """
        Extract text with fallback to different methods
        
        Args:
            file_path: Path to PDF file
            
        Returns:
            Extracted text or None if all methods fail
        """
        for method in self.supported_methods:
            try:
                text = self.extract_text(file_path, method)
                if text and len(text.strip()) > 0:
                    logger.info(f"Successfully extracted text using {method}")
                    return text
            except Exception as e:
                logger.warning(f"Method {method} failed: {str(e)}")
                continue
        
        logger.error("All extraction methods failed")
        return None
    
    def get_pdf_metadata(self, file_path: str) -> Dict[str, Any]:
        """
        Extract metadata from PDF file
        
        Args:
            file_path: Path to PDF file
            
        Returns:
            Dictionary containing PDF metadata
        """
        metadata = {}
        try:
            with open(file_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                metadata = {
                    'num_pages': len(pdf_reader.pages),
                    'title': pdf_reader.metadata.get('/Title', ''),
                    'author': pdf_reader.metadata.get('/Author', ''),
                    'creator': pdf_reader.metadata.get('/Creator', ''),
                    'producer': pdf_reader.metadata.get('/Producer', ''),
                    'creation_date': pdf_reader.metadata.get('/CreationDate', ''),
                    'modification_date': pdf_reader.metadata.get('/ModDate', '')
                }
        except Exception as e:
            logger.error(f"Error extracting PDF metadata: {str(e)}")
        
        return metadata
    
    def validate_pdf(self, file_path: str) -> bool:
        """
        Validate if file is a readable PDF
        
        Args:
            file_path: Path to PDF file
            
        Returns:
            True if PDF is valid and readable
        """
        try:
            with open(file_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                # Try to read first page
                if len(pdf_reader.pages) > 0:
                    pdf_reader.pages[0].extract_text()
                    return True
        except Exception as e:
            logger.error(f"PDF validation failed: {str(e)}")
        
        return False