# data_models.py - autogenerated template file
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from enum import Enum

class ExperienceLevel(str, Enum):
    ENTRY = "entry"
    JUNIOR = "junior"
    MID = "mid"
    SENIOR = "senior"
    LEAD = "lead"
    EXECUTIVE = "executive"

class ResumeData(BaseModel):
    """Model for parsed resume data"""
    name: Optional[str] = None
    email: Optional[str] = None
    phone: Optional[str] = None
    summary: Optional[str] = None
    skills: List[str] = Field(default_factory=list)
    experience: List[str] = Field(default_factory=list)
    education: List[str] = Field(default_factory=list)
    certifications: List[str] = Field(default_factory=list)
    years_of_experience: Optional[int] = None
    raw_text: str = ""

class JobDescription(BaseModel):
    """Model for job description data"""
    id: str
    title: str
    company: Optional[str] = None
    location: Optional[str] = None
    description: str
    required_skills: List[str] = Field(default_factory=list)
    preferred_skills: List[str] = Field(default_factory=list)
    experience_level: Optional[ExperienceLevel] = None
    years_required: Optional[int] = None
    responsibilities: List[str] = Field(default_factory=list)
    qualifications: List[str] = Field(default_factory=list)
    raw_text: str = ""

class SkillMatch(BaseModel):
    """Model for skill matching results"""
    skill: str
    is_match: bool
    similarity_score: float
    resume_skill: Optional[str] = None  # The actual skill found in resume

class JobMatch(BaseModel):
    """Model for job matching results"""
    job_id: str
    job_title: str
    company: Optional[str] = None
    overall_score: float = Field(ge=0, le=1)
    matched_skills: List[SkillMatch] = Field(default_factory=list)
    missing_skills: List[str] = Field(default_factory=list)
    experience_match: bool = False
    education_match: bool = False
    recommendation_reason: str = ""
    ranking: Optional[int] = None

class MatchingResult(BaseModel):
    """Model for complete matching analysis"""
    resume_summary: str
    total_jobs_analyzed: int
    job_matches: List[JobMatch] = Field(default_factory=list)
    best_match: Optional[JobMatch] = None
    analysis_timestamp: str
    recommendations: List[str] = Field(default_factory=list)

class AgentResponse(BaseModel):
    """Generic model for agent responses"""
    agent_name: str
    success: bool
    message: str
    data: Optional[Dict[str, Any]] = None
    error: Optional[str] = None